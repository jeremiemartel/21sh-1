DELETE THIS FILE BEFORE PUSH


// Program
ASTreeNode *program();		// test all posibilities						DONE
ASTreeNode *program1(); 	// linebreak, complete_commands, linebreak		DONE
ASTreeNode *program2();		// linebreak									DONE

// Complete_commands
ASTreeNode *complete_cmds();	// test all posibilities					DONE
ASTreeNode *complete_cmds1();	// complete_commands, newline_list, complete_commands		DONE
ASTreeNode *complete_cmds2();	// complete_commands						DONE

// Complete_command
ASTreeNode *complete_cmd();		// test all posibilities					DONE
ASTreeNode *complete_cmd1();	// list, separator_op						DONE
ASTreeNode *complete_cmd2();	// list										DONE

// List
ASTreeNode *list();			// test all posibilities						DONE
ASTreeNode *list1();		// list, separator_op, and_or					DONE
ASTreeNode *list2();		// and_or										DONE

// And_Or
ASTreeNode *and_or();		// test all posibilities						DONE
ASTreeNode *and_or1();		// and_or, AND_IF, linebreak, pipeline			DONE
ASTreeNode *and_or2();		// and_or, OR_IF, linebreak, pipeline			DONE
ASTreeNode *and_or3();		// pipeline										DONE

// Pipeline
ASTreeNode *pipeline();		// test all posibilities						DONE
ASTreeNode *pipeline1();	// bang, pipe_sequence							DONE
ASTreeNode *pipeline2();	// pipe_sequence								DONE

// Pipe_sequence
ASTreeNode *pipe_sequence();	// test all posibilities					DONE
ASTreeNode *pipe_sequence1();	// pipe_sequence, '|', linebreak, simple_ command		DONE
ASTreeNode *pipe_sequence2();	// simple_command							DONE

// Simple_command
ASTreeNode *simple_command();	// test all posibilities					DONE
ASTreeNode *simple_command1();	// cmd_prefix, cmd_word, cmd_suffix			DONE
ASTreeNode *simple_command2();	// cmd_prefix, cmd_word						DONE
ASTreeNode *simple_command3();	// cmd_name, cmd_suffix						DONE
ASTreeNode *simple_command4();	// cmd_prefix								DONE
ASTreeNode *simple_command5();	// cmd_name									DONE

// Cmd_name
ASTreeNode *cmd_name();		// WORD [APPLY RULE 7a]							DONE

// Cmd_word
ASTreeNode *cmd_word();		// WORD [APPLY RULE 7b]							DONE

// Cmd_prefix
ASTreeNode *cmd_prefix();	// test all posibilities						DONE
ASTreeNode *cmd_prefix1();	// cmd_prefix, io_redirect						DONE
ASTreeNode *cmd_prefix2();	// cmd_prefix, ASSIGNEMENT_WORD					DONE
ASTreeNode *cmd_prefix3();	// io_redirect									DONE
ASTreeNode *cmd_prefix4();	// ASSIGNEMENT_WORD								DONE

// Cmd_suffix
ASTreeNode *cmd_suffix();	// test all posibilities						DONE
ASTreeNode *cmd_suffix1();	// cmd_suffix, io_redirect						DONE
ASTreeNode *cmd_suffix2();	// cmd_suffix, WORD								DONE
ASTreeNode *cmd_suffix3();	// io_redirect									DONE
ASTreeNode *cmd_suffix4();	// WORD											DONE

// Io_redirect
ASTreeNode *io_redirect();	// test all posibilities						DONE
ASTreeNode *io_redirect1();	// IO_NUMBER, io_file							DONE
ASTreeNode *io_redirect2();	// IO_NUMBER, io_here							DONE
ASTreeNode *io_redirect3();	// io_file										DONE
ASTreeNode *io_redirect4();	// io_here										DONE

// Io_file 
ASTreeNode *io_file();		// test all posibilities						DONE

// Filename
ASTreeNode *filename();		// WORD [APPLY RULE 2]							DONE

// Io_here
ASTreeNode *io_here();		// test all posibilities						DONE
ASTreeNode *io_here1();		// DLESS, here_end								DONE
ASTreeNode *io_here2();		// DLESSDASH here_end							DONE

// Here_end
ASTreeNode *here_end();		// WORD [APPLY RULE 3]							DONE

// Newline_list
ASTreeNode *newline_list();		// test all posibilities					DONE
ASTreeNode *newline_list1();	// newline_list, NEWLINE					DONE
ASTreeNode *newline_list2();	// NEWLINE									DONE

//Linebreak
ASTreeNode *linebreak();	// test all posibilities						DONE
ASTreeNode *linebreak1();	// newline_list									DONE
ASTreeNode *linebreak2();	// EMPTY										TO DO

// Separator_op																DONE
ASTreeNode *seperator_op();		// test all posibilities					DONE
ASTreeNode *separator_op1();	// '&'										DONE
ASTreeNode *separator_op2();	// ';'										DONE

// Separator
ASTreeNode *separator();	// test all posibilities						DONE
ASTreeNode *separator1();	// separator_op, linebreak						DONE
ASTreeNode *separator2();	// newline_list									DONE



/* -------------------------------------------------------
   The grammar symbols
   ------------------------------------------------------- */
%token  WORD
%token  ASSIGNMENT_WORD
%token  NAME
%token  NEWLINE
%token  IO_NUMBER


/* The following are the operators (see XBD Operator)
   containing more than one character. */


%token  AND_IF    OR_IF    DSEMI
/*      '&&'      '||'     ';;'    */


%token  DLESS  DGREAT  LESSAND  GREATAND  LESSGREAT  DLESSDASH
/*      '<<'   '>>'    '<&'     '>&'      '<>'       '<<-'   */


%token  CLOBBER
/*      '>|'   */


/* The following are the reserved words. */


%token  If    Then    Else    Elif    Fi    Do    Done
/*      'if'  'then'  'else'  'elif'  'fi'  'do'  'done'   */


%token  Case    Esac    While    Until    For
/*      'case'  'esac'  'while'  'until'  'for'   */


/* These are reserved words, not operator tokens, and are
   recognized when reserved words are recognized. */


%token  Lbrace    Rbrace    Bang
/*      '{'       '}'       '!'   */


%token  In
/*      'in'   */


/* -------------------------------------------------------
   The Grammar
   ------------------------------------------------------- */
%start program
%%
program          : linebreak complete_commands linebreak
                 | linebreak
                 ;
complete_commands: complete_commands newline_list complete_command
                 |                                complete_command
                 ;
complete_command : list separator_op
                 | list
                 ;
list             : list separator_op and_or
                 |                   and_or
                 ;
and_or           :                         pipeline
                 | and_or AND_IF linebreak pipeline
                 | and_or OR_IF  linebreak pipeline
                 ;
pipeline         :      pipe_sequence
                 | Bang pipe_sequence
                 ;
pipe_sequence    :                             command
                 | pipe_sequence '|' linebreak command
                 ;
command          : simple_command
                 ;
name             : NAME                     /* Apply rule 5 */
                 ;
wordlist         : wordlist WORD
                 |          WORD
                 ;
fname            : NAME                            /* Apply rule 8 */
                 ;
simple_command   : cmd_prefix cmd_word cmd_suffix
                 | cmd_prefix cmd_word
                 | cmd_prefix
                 | cmd_name cmd_suffix
                 | cmd_name
                 ;
cmd_name         : WORD                   /* Apply rule 7a */
                 ;
cmd_word         : WORD                   /* Apply rule 7b */
                 ;
cmd_prefix       :            io_redirect
                 | cmd_prefix io_redirect
                 |            ASSIGNMENT_WORD
                 | cmd_prefix ASSIGNMENT_WORD
                 ;
cmd_suffix       :            io_redirect
                 | cmd_suffix io_redirect
                 |            WORD
                 | cmd_suffix WORD
                 ;
redirect_list    :               io_redirect
                 | redirect_list io_redirect
                 ;
io_redirect      :           io_file
                 | IO_NUMBER io_file
                 |           io_here
                 | IO_NUMBER io_here
                 ;
io_file          : '<'       filename
                 | LESSAND   filename
                 | '>'       filename
                 | GREATAND  filename
                 | DGREAT    filename
                 | LESSGREAT filename
                 | CLOBBER   filename
                 ;
filename         : WORD                      /* Apply rule 2 */
                 ;
io_here          : DLESS     here_end
                 | DLESSDASH here_end
                 ;
here_end         : WORD                      /* Apply rule 3 */
                 ;
newline_list     :              NEWLINE
                 | newline_list NEWLINE
                 ;
linebreak        : newline_list
                 | /* empty */
                 ;
separator_op     : '&'
                 | ';'
                 ;
separator        : separator_op linebreak
                 | newline_list
                 ;